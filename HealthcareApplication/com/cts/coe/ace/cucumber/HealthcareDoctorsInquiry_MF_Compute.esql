BROKER SCHEMA com.cts.coe.ace.cucumber
PATH com.cts.coe.ace.cucumber;


CREATE COMPUTE MODULE HealthcareDoctorsInquiry_MF_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		CREATE FIELD Environment.Variables;
		DECLARE rOut,routcardio REFERENCE TO OutputLocalEnvironment;
		DECLARE envRef REFERENCE TO Environment.Variables;
		
		DECLARE cDocFname CHARACTER InputRoot.JSON.Data.Name;
		DECLARE cSpecialization CHARACTER InputRoot.JSON.Data.Specialization;
		DECLARE cTemp CHARACTER checkAndFetchDoctorInfo(UPPER(cSpecialization));
		
		IF cTemp <> '' THEN
			DECLARE bTemp BIT  CAST(cTemp AS BIT CCSID 1208);
			CREATE LASTCHILD OF Environment.Variables.{cSpecialization} DOMAIN 'JSON' PARSE(bTemp CCSID 1208);
			DECLARE refDocItem REFERENCE TO Environment.Variables.{cSpecialization}.JSON.Data.Item[1];
			DECLARE bFlag BOOLEAN TRUE;
			
			LOOP_FIND_DOC : WHILE LASTMOVE(refDocItem) DO
								IF refDocItem.DoctorFirstName = cDocFname THEN
									CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
									CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Array)Data;
									
									SET OutputRoot.JSON.Data.Item = refDocItem;
									SET bFlag = FALSE;
									LEAVE LOOP_FIND_DOC;
								END IF;
								
								MOVE refDocItem NEXTSIBLING REPEAT TYPE NAME;
							END WHILE;
			
			IF bFlag THEN
				CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' PARSE(bTemp CCSID 1208);	
			END IF;
			
						
		ELSE
			SET OutputRoot.JSON.Data.status = 'No Data available for the given Specialization';
		END IF;

		
--		CALL CopyMessageHeaders();
--		DECLARE cLookupKey,cLookupName CHARACTER;
--		SET envRef.Specialization= InputRoot.JSON.Data.Specialization;
--		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
--		
--		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Array)Data;
		
--		DECLARE i INTEGER 1;
--		 WHILE (i<4) DO 
--		 	SET cLookupKey = envRef.Specialization|| CAST( i AS CHARACTER);
--		 	SET cLookupName =COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey ||'|DoctorFname')),'');
--		 	
--		 	IF cLookupName = InputRoot.JSON.Data.name THEN
--		 	  SET OutputRoot.JSON.Data.Item.DoctorFirstName = cLookupName;
--		 	  SET OutputRoot.JSON.Data.Item.DoctorLastName= COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|DoctorLname')),'');
--			  SET OutputRoot.JSON.Data.Item.Specialization= envRef.Specialization;
--			  SET OutputRoot.JSON.Data.Item.PhoneNumber=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|PhoneNumber')),'');
--			  SET OutputRoot.JSON.Data.Item.AddLine1=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|AddLine1')),'');
--			  SET OutputRoot.JSON.Data.Item.AddLine2=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|AddLine2')),'');
--			  SET OutputRoot.JSON.Data.Item.City=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|City')),'');
--			  SET OutputRoot.JSON.Data.Item.State=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|State')),'');
--			  SET OutputRoot.JSON.Data.Item.ZipCode= COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|ZipCode')),'');
--		 	
--		 	END IF;
--		 	SET i = i+1;
--		 END WHILE;
--		 
--		 
--		IF NOT EXISTS (OutputRoot.JSON.Data.Item.DoctorFirstName[]) THEN
--			SET i =1;
--		 WHILE (i<4) DO 	
--			SET cLookupKey = envRef.Specialization|| CAST( i AS CHARACTER);
--			
--
--					
--					SET OutputRoot.JSON.Data.Item[i].DoctorFirstName=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey ||'|DoctorFname')),'');
--					SET cLookupName = OutputRoot.JSON.Data.Item[i].DoctorFirstName;
--					
--					SET OutputRoot.JSON.Data.Item[i].DoctorLastName= COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|DoctorLname')),'');
--					SET OutputRoot.JSON.Data.Item[i].Specialization= envRef.Specialization;
--					SET OutputRoot.JSON.Data.Item[i].PhoneNumber=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|PhoneNumber')),'');
--					SET OutputRoot.JSON.Data.Item[i].AddLine1=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|AddLine1')),'');
--					SET OutputRoot.JSON.Data.Item[i].AddLine2=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|AddLine2')),'');
--					SET OutputRoot.JSON.Data.Item[i].City=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|City')),'');
--					SET OutputRoot.JSON.Data.Item[i].State=COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|State')),'');
--					SET OutputRoot.JSON.Data.Item[i].ZipCode= COALESCE((au.co.mla.esb.common.GetJavaProperty(cLookupKey||'|ZipCode')),'');
--					
--			 
--			SET i = i+1;
--		END WHILE;
--		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
